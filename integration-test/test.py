from enn_trainer import load_agent
from rogue_net_rs import RustRogueNet
from entity_gym.env import *
import numpy as np


def test_interpolated_vgated_polar_relpos_encoding():
    agent = load_agent("../test-data/interpolated-vgated-polar-relpos")
    rust_agent = RustRogueNet("../test-data/interpolated-vgated-polar-relpos")

    # fmt: off
    obs = Observation(
        features={
            "Bullet": [
                [332.4966, 229.59288, -531.68524, 888.1057, 21],
                [187.94043, 223.05742, -733.5758, 595.61725, 9],
            ],
            "Asteroid": [
                [5, 46.376263, 1343.6213, -60.333725, -150.14291, 60.38599],
                [5, 49.34102, 1196.0782, -411.39615, -13.000875, 51.517563],
                [5, 35.517136, -797.5166, -590.1239, 109.01546, -16.297422],
                [5, 42.010525, -1335.4867, -188.97487, 186.00848, -42.126675],
                [5, 40.753147, 1286.3406, 315.95453, -4.4167175, -72.66925],
                [5, 44.961437, -909.1708, 437.07986, 157.42297, -158.60793],
                [5, 42.685375, -895.25684, 546.1078, -49.145126, -74.60949],
                [5, 27.552427, -579.9507, -567.0937, -1.0592155, 133.90579],
                [5, 31.150223, -828.203, 701.4151, -53.641724, 73.88277],
                [5, 38.9011, -1022.0626, -591.07086, -229.52197, 48.143127],
                [5, 39.70717, 1340.2526, 453.90906, 157.47311, 3.314621],
                [5, 24.657486, 1340.7322, -642.3886, -60.488983, -399.08264],
                [5, 44.58143, -1413.9666, -47.428467, 91.22243, -23.057056],
                [5, 40.547077, 1062.664, 665.6409, -111.578735, 208.53827],
                [5, 36.653584, 716.2661, -715.8644, 38.343506, -50.872932],
                [5, 50.828888, 1476.1198, -478.91013, 69.12782, -242.57382],
                [5, 31.008062, -1453.1178, -446.65137, 9.857653, -299.56558],
                [5, 38.41469, 1498.4147, 122.844124, -0.17997609, 176.20218],
                [5, 42.33036, -987.38104, 270.49826, 31.80194, -264.99652],
                [5, 53.697002, -672.1332, -545.9966, -16.160547, 137.36206],
                [5, 32.312138, -1153.6282, 289.51077, -29.483334, -220.64932],
                [5, 33.01252, 1143.1, -476.36584, -68.88859, -17.020115],
                [5, 47.310513, 363.33664, -743.5533, 82.75871, -7.842938],
                [5, 47.90092, -1016.86084, -461.57898, 20.12912, 86.75376],
                [5, 26.029097, 738.6734, 746.85504, -52.49785, 221.72945],
            ],
            "Fighter": [
                [-236.2311, 281.71817, 473.78757, 159.7667, 0.8276602, -0.5612295, 2616, 0, 0],
            ],
            "EnemyFighter": [
                [426.5647, -16.637564, -267.9816, 134.85497, -0.93203545, 0.36236712, 0, 0],
            ],
        },
        ids={
            "Bullet": [0, 1],
            "Asteroid": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
            "Fighter": [27],
            "EnemyFighter": [28],
        },
        done=False,
        reward=0.0,
        actions={"FighterAction": CategoricalActionMask(actor_types=["Fighter"])},
    )

    action, predicted_return = agent.act(obs)
    print(action["FighterAction"].probs, predicted_return)

    actionrs, predicted_returnrs = rust_agent.forward(obs)
    print(actionrs, predicted_returnrs)

    probs1 = np.array(action["FighterAction"].probs)
    probs2 = np.array(actionrs)
    assert np.allclose(probs1, probs2, atol=1e-5)
